/* ========================================================================== *
 * Grid module
 * -------------------------------------------------------------------------- */

/* ===================================== *
 * Utilities
 * ------------------------------------- */

$small-gutter : 10px;
$medium-gutter: 20px;
$large-gutter : 30px;
$grid-columns      : 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve';

// Horizontal gutter mixin
@mixin horizontal-gutter($amount) {
  margin-left:  -$amount / 2;
  margin-right: -$amount / 2;

  > * {
    margin-left:  $amount / 2;
    margin-right: $amount / 2;
  }
}

// Vertical gutter mixin
@mixin vertical-gutter($amount) {
  margin-bottom: -$amount;

  > * {
    margin-bottom: $amount;
  }
}

/* ===================================== *
 * Common
 * ------------------------------------- */

// Columns container
[class*='columns'] {
  display: flex;
  flex-flow: row wrap;

  > * { @extend .collapse-bottom; }
}

// Rows container
[class*='rows'] {
  display: flex;
  flex-flow: column;
  align-items: flex-start;

  > * { @extend .collapse; }
}

// Top-align columns in certain contexts
form [class*='columns'] {
  align-items: flex-start;
}

// Normal gutter
.gutter {
  @include horizontal-gutter($medium-gutter);

  &.match {
    @include vertical-gutter($medium-gutter);
  }
}

// Small gutter
.small-gutter {
  @include horizontal-gutter($small-gutter);

  &.match {
    @include vertical-gutter($small-gutter);
  }
}

// Large gutter
.large-gutter {
  @include horizontal-gutter($large-gutter);

  &.match {
    @include vertical-gutter($large-gutter);
  }
}

// Flexible columns
.flex {
  flex: 1;
}

// Expanded items will be large as possible
.grow { 
  flex-grow: 1;
}

.flex-row {
  display: flex;

  // Add gutter between top level elements
  &:not(.no-gutter) {
    > * ~ * {
      margin-left: 8px;
    }
  }
  &.medium-gutter {
    > * ~ * {
      margin-left: $card-padding;
    }
  }
}

@function calc-basis($width, $gutter-size) {
  @if $gutter-size == 0 {
    @return #{100% / $width};
  } @else {
    @return calc(#{100% / $width} - #{$gutter-size});
  }
}


// Loop through columns
@for $a from 1 through length($grid-columns) {

  // Define column expanse
  $total: length($grid-columns);
  $number: nth($grid-columns, $a); // Number of columns as word (1: one)

  // Placeholders for reduced CSS output
  // examples: span-one is a column with 100% width
  //           span-two has 50% width (minus gutters)
  //           span-four has 25% width (minus gutters)
  //
  %span-#{$number} /* No gutter */ { flex-basis: calc-basis(($total / $a), 0) }
  %span-#{$number}-gutter          { flex-basis: calc-basis(($total / $a), $medium-gutter); }
  %span-#{$number}-small-gutter    { flex-basis: calc-basis(($total / $a), $small-gutter); }
  %span-#{$number}-large-gutter    { flex-basis: calc-basis(($total / $a), $large-gutter); }

  // If number of columns is a factor of total columns.
  @if $total % $a == 0 {
    $columns: nth($grid-columns, ($total / $a)); // Column divisions for this number

    // Container-declared columns
    .#{$number}-columns {
      /* No gutter */ > * { @extend %span-#{$columns}; }
      &.gutter        > * { @extend %span-#{$columns}-gutter; }
      &.small-gutter  > * { @extend %span-#{$columns}-small-gutter; }
      &.large-gutter  > * { @extend %span-#{$columns}-large-gutter; }
    }
  }

  // Loop through columns starting at current column
  @for $b from $a through $total {

    // Create width based classnames for a column
    // example: one-of-two, three-of-twelve
    @if $total % $b == 0 {

      // How many columns should this span?
      // Generate names: one-of-two, three-of-twelve, etc
      $column-span: #{$number}-of-#{nth($grid-columns, $b)};
      
      // Derive the number of columns this percentage should span
      // Let's say that $a: 3, and $b: 4, and $total: 12
      $columns: $total * ($a / $b);        // $columns: 9; because 3/4 * 12 == 9
      $key: nth($grid-columns, $columns); // $actual: 'nine'

      // Now this will extend the span-nine placeholders
      /* No gutter */ > .#{$column-span} { @extend %span-#{$key}; }
      .gutter         > .#{$column-span} { @extend %span-#{$key}-gutter; }
      .small-gutter   > .#{$column-span} { @extend %span-#{$key}-small-gutter; }
      .large-gutter   > .#{$column-span} { @extend %span-#{$key}-large-gutter; }
    }
  }
}

[class*='columns'] {
  /* No gutter */ .span { flex-basis: calc-basis(1, 0) }
  .gutter       > .span { flex-basis: calc-basis(1, $medium-gutter) }
  .small-gutter > .span { flex-basis: calc-basis(1, $small-gutter) }
  .large-gutter > .span { flex-basis: calc-basis(1, $large-gutter) }

  // Breakpoints
  @include until-x-small {
    &.flex-after-x-small > * { flex-basis: 100%; }
  }

  @include until-small {
    &.flex-after-small > * { flex-basis: 100%; }
  }

  @include until-medium {
    &.flex-after-medium > * { flex-basis: 100%; }
  }

  @include at-x-small {
    &.flex-until-x-small > * { flex-basis: 100%; }
  }

  @include at-small {
    &.flex-until-small > * { flex-basis: 100%; }
  }

  @include at-medium {
    &.flex-until-medium > * { flex-basis: 100%; }
  }

  @include between($x-small-width, $small-width) {
    &.collapse-two {
      /* No gutter */  > * { flex-basis: calc-basis(2, 0) }
      &.gutter         > * { flex-basis: calc-basis(2, $medium-gutter) }
      &.small-gutter   > * { flex-basis: calc-basis(2, $small-gutter) }
      &.large-gutter   > * { flex-basis: calc-basis(2, $large-gutter) }
    }
  }
}


/* ===================================== *
 * Vertical alignment
 * ------------------------------------- */

.top-aligned {
  align-items: flex-start;
  vertical-align: top;
}

.bottom-aligned {
  align-items: flex-end;
  vertical-align: bottom;
}

.baseline-aligned {
  align-items: baseline;
  vertical-align: baseline;
}

.start-aligned {
  align-items: flex-start;
}

.center-aligned {
  align-items: center;
}

.end-aligned {
  align-items: flex-end;
}

/* ===================================== *
 * Horizontal justification
 * ------------------------------------- */

.left-justified {
  justify-items: flex-start;
}

.center-justified {
  justify-items: center;
}

.right-justified {
  justify-items: flex-end;
}

.push-right {
  margin-left: auto;
}

.push-left {
  margin-right: auto;
}
